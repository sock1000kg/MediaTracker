// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int       @id @default(autoincrement())
  username        String    @unique
  password        String

  logs            UserLogs[]@relation("UserLogsToUser")
  mediaType       MediaType[]@relation("MediaTypesToUser")
  media           Media[]@relation("MediaToUser")
}

model Media {
  id              Int       @id @default(autoincrement())
  title           String 
                            
                                                //book    music
  creator         String?                      //author  artist
  year            Int?
  metadata        Json?

  userId          Int?
  user            User?     @relation(fields: [userId], references: [id], name: "MediaToUser", onDelete: Cascade)

  mediaTypeId     Int?
  mediaType       MediaType? @relation(fields: [mediaTypeId], references: [id], name: "MediaToMediaTypes", onDelete: Cascade)

  logs            UserLogs[]@relation("UserLogsToMedia")
}

model MediaType {
  id              Int       @id @default(autoincrement())
  name            String    
  created_at      DateTime  @default(now())

  userId          Int?      
  user            User?     @relation(fields: [userId], references: [id], name: "MediaTypesToUser", onDelete: Cascade)

  media           Media[]   @relation("MediaToMediaTypes")

  @@unique([userId, name]) //One user have only unique mediaTypes
}
/* FOR DISPLAYING THE SCORES FROM OUTSIDE SOURCES IF NEEDED
model RatingSource {
  id              Int       @id @default(autoincrement())
  mediaId         Int
  media           Media     @relation(fields: [mediaId], references: [id])
  source          String
  value           Float
  scale           Int
} 
*/

model UserLogs {
  id              Int       @id @default(autoincrement())


  status          String?   //"Completed" "In progress" "Wishlist" "None"
  rating          Float?    //scale 100
  notes           String?
  logged_at       DateTime  @default(now())

  userId          Int
  user            User      @relation(fields: [userId], references: [id], name: "UserLogsToUser", onDelete: Cascade)

  mediaId         Int
  media           Media     @relation(fields: [mediaId], references: [id], name: "UserLogsToMedia", onDelete: Cascade)

  @@unique([userId, mediaId]) //avoid duplicate logs of the same media for the same user
}